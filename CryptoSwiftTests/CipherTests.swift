//
//  CipherTests.swift
//  CryptoSwift
//
//  Created by Marcin Krzyzanowski on 29/08/14.
//  Copyright (c) 2014 Marcin Krzyzanowski. All rights reserved.
//

import Foundation
import XCTest
import CryptoSwift

func compareMatrix(a:[[Byte]], b:[[Byte]]) -> Bool {
    for (i,arr) in enumerate(a) {
        for (j,val) in enumerate(arr) {
            if (val != b[i][j]) {
                println("\(val) vs \(b[i][j])")
                return false
            }
        }
    }
    return true
}

class CipherTests: XCTestCase {
    
    // 128 bit key
    let aesKey:[Byte] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]

    override func setUp() {
        super.setUp()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    func testAES_encode() {
        let input:[Byte] = [0x00, 0x11, 0x22, 0x33,
                            0x44, 0x55, 0x66, 0x77,
                            0x88, 0x99, 0xaa, 0xbb,
                            0xcc, 0xdd, 0xee, 0xff];
        
        let expected:[Byte] = [0x69, 0xc4, 0xe0, 0xd8,
                               0x6a, 0x7b, 0x4, 0x30,
                               0xd8, 0xcd, 0xb7, 0x80,
                               0x70, 0xb4, 0xc5, 0x5a];
        
        if let aes = AES(key: NSData.withBytes(aesKey)) {
            let encrypted = aes.encrypt(NSData.withBytes(input))
            XCTAssertEqual(encrypted!, NSData.withBytes(expected), "encryption failed")
        } else {
            XCTAssert(false, "failed")
        }
    }
    
    func testAES_encode_cbc() {
        let key:[Byte] = [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c];
        let iv:[Byte] = [0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F]
        let plaintext:[Byte] = [0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a]
        let expected:[Byte] = [0x76,0x49,0xab,0xac,0x81,0x19,0xb2,0x46,0xce,0xe9,0x8e,0x9b,0x12,0xe9,0x19,0x7d];
        
        if let aes = AES(key: NSData.withBytes(key), iv:NSData.withBytes(iv), blockMode: .CBC) {
            XCTAssertTrue(aes.blockMode == .CBC, "Invalid block mode")
            let encrypted = aes.encrypt(NSData.withBytes(plaintext))
            XCTAssertEqual(encrypted!, NSData.withBytes(expected), "encryption failed")
        } else {
            XCTAssert(false, "failed")
        }
    }

    func testAES_encode_cfb() {
        let key:[Byte] = [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c];
        let iv:[Byte] = [0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F]
        let plaintext:[Byte] = [0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a]
        let expected:[Byte] = [0x3b,0x3f,0xd9,0x2e,0xb7,0x2d,0xad,0x20,0x33,0x34,0x49,0xf8,0xe8,0x3c,0xfb,0x4a];
        
        if let aes = AES(key: NSData.withBytes(key), iv:NSData.withBytes(iv), blockMode: .CFB) {
            XCTAssertTrue(aes.blockMode == .CFB, "Invalid block mode")
            let encrypted = aes.encrypt(NSData.withBytes(plaintext))
            XCTAssertEqual(encrypted!, NSData.withBytes(expected), "encryption failed")
        } else {
            XCTAssert(false, "failed")
        }
    }

    func testAES_SubBytes() {
        let input:[[Byte]] = [[0x00, 0x10, 0x20, 0x30],
                              [0x40, 0x50, 0x60, 0x70],
                              [0x80, 0x90, 0xa0, 0xb0],
                              [0xc0, 0xd0, 0xe0, 0xf0]]
        
        let expected:[[Byte]] = [[0x63, 0xca, 0xb7, 0x04],
                                 [0x09, 0x53, 0xd0, 0x51],
                                 [0xcd, 0x60, 0xe0, 0xe7],
                                 [0xba, 0x70, 0xe1, 0x8c]]
        
        XCTAssertTrue(compareMatrix(expected, AES(key: NSData.withBytes(aesKey))!.subBytes(input)), "subBytes failed")
    }
    
    func testAES_shiftRows() {
        let input:[[Byte]] = [[0x63, 0x09, 0xcd, 0xba],
            [0xca, 0x53, 0x60, 0x70],
            [0xb7, 0xd0, 0xe0, 0xe1],
            [0x04, 0x51, 0xe7, 0x8c]]
        
        let expected:[[Byte]] = [[0x63, 0x9, 0xcd, 0xba],
            [0x53, 0x60, 0x70, 0xca],
            [0xe0, 0xe1, 0xb7, 0xd0],
            [0x8c, 0x4, 0x51, 0xe7]]
        
        XCTAssertTrue(compareMatrix(expected, AES(key: NSData.withBytes(aesKey))!.shiftRows(input)), "shiftRows failed")
    }
    
    func testAES_multiply() {
        XCTAssertTrue(AES(key: NSData.withBytes(aesKey))?.multiplyPolys(0x0e, 0x5f) == 0x17, "Multiplication failed")
    }
    
    func testAES_expandKey() {
        let expected:[Byte] = [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0xd6, 0xaa, 0x74, 0xfd, 0xd2, 0xaf, 0x72, 0xfa, 0xda, 0xa6, 0x78, 0xf1, 0xd6, 0xab, 0x76, 0xfe, 0xb6, 0x92, 0xcf, 0xb, 0x64, 0x3d, 0xbd, 0xf1, 0xbe, 0x9b, 0xc5, 0x0, 0x68, 0x30, 0xb3, 0xfe, 0xb6, 0xff, 0x74, 0x4e, 0xd2, 0xc2, 0xc9, 0xbf, 0x6c, 0x59, 0xc, 0xbf, 0x4, 0x69, 0xbf, 0x41, 0x47, 0xf7, 0xf7, 0xbc, 0x95, 0x35, 0x3e, 0x3, 0xf9, 0x6c, 0x32, 0xbc, 0xfd, 0x5, 0x8d, 0xfd, 0x3c, 0xaa, 0xa3, 0xe8, 0xa9, 0x9f, 0x9d, 0xeb, 0x50, 0xf3, 0xaf, 0x57, 0xad, 0xf6, 0x22, 0xaa, 0x5e, 0x39, 0xf, 0x7d, 0xf7, 0xa6, 0x92, 0x96, 0xa7, 0x55, 0x3d, 0xc1, 0xa, 0xa3, 0x1f, 0x6b, 0x14, 0xf9, 0x70, 0x1a, 0xe3, 0x5f, 0xe2, 0x8c, 0x44, 0xa, 0xdf, 0x4d, 0x4e, 0xa9, 0xc0, 0x26, 0x47, 0x43, 0x87, 0x35, 0xa4, 0x1c, 0x65, 0xb9, 0xe0, 0x16, 0xba, 0xf4, 0xae, 0xbf, 0x7a, 0xd2, 0x54, 0x99, 0x32, 0xd1, 0xf0, 0x85, 0x57, 0x68, 0x10, 0x93, 0xed, 0x9c, 0xbe, 0x2c, 0x97, 0x4e, 0x13, 0x11, 0x1d, 0x7f, 0xe3, 0x94, 0x4a, 0x17, 0xf3, 0x7, 0xa7, 0x8b, 0x4d, 0x2b, 0x30, 0xc5]
        
        if let aes = AES(key: NSData.withBytes(aesKey)) {
            XCTAssertEqual(expected, aes.expandKey(), "expandKey failed")
        }

    }
    
    func testAES_addRoundKey() {
        let input:[[Byte]] = [[0x00, 0x44, 0x88, 0xcc],
            [0x11, 0x55, 0x99, 0xdd],
            [0x22, 0x66, 0xaa, 0xee],
            [0x33, 0x77, 0xbb, 0xff]]
        
        let expected:[[Byte]] = [[0, 64, 128, 192],
            [16, 80, 144, 208],
            [32, 96, 160, 224],
            [48, 112, 176, 240]]
        
        if let aes = AES(key: NSData.withBytes(aesKey)) {
            let result = aes.addRoundKey(input, aes.expandKey(), 0)
            XCTAssertTrue(compareMatrix(expected, result), "addRoundKey failed")
        }
    }
   
    func testAES_mixColumns() {
        let input:[[Byte]] = [[0x63, 0x9, 0xcd, 0xba],
            [0x53, 0x60, 0x70, 0xca],
            [0xe0, 0xe1, 0xb7, 0xd0],
            [0x8c, 0x4, 0x51, 0xe7]]
        
        let expected:[[Byte]] = [[0x5f, 0x57, 0xf7, 0x1d],
            [0x72, 0xf5, 0xbe, 0xb9],
            [0x64, 0xbc, 0x3b, 0xf9],
            [0x15, 0x92, 0x29, 0x1a]]
        
        if let aes = AES(key: NSData.withBytes(aesKey)) {
            let result = aes.mixColumns(input)
            XCTAssertTrue(compareMatrix(expected, result), "mixColumns failed")
        }
    }
    
    func testPoly1305() {
        let key:[Byte] = [0xdd,0xde,0xdf,0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc]
        let msg:[Byte] = [0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,0xc0,0xc1]
        let expectedMac:[Byte] = [0xdd,0xb9,0xda,0x7d,0xdd,0x5e,0x52,0x79,0x27,0x30,0xed,0x5c,0xda,0x5f,0x90,0xa4]
        
        let mac = Authenticator.Poly1305(key: NSData.withBytes(key)).authenticate(NSData.withBytes(msg))
        XCTAssertEqual(mac!, NSData.withBytes(expectedMac), "Invalid authentication result")
        
        // extensions
        let msgData = NSData.withBytes(msg)
        let mac2 = msgData.authenticate(Authenticator.Poly1305(key: NSData.withBytes(key)))
        XCTAssertNotNil(mac2, "")
        XCTAssertEqual(mac2!, NSData.withBytes(expectedMac), "Invalid authentication result")
    }

    func testChaCha20() {
        let keys:[[Byte]] = [
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01],
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
            [0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F]
        ]
        
        let ivs:[[Byte]] = [
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01],
            [0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
            [0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07]
        ]
        
        let expectedHexes = [
            "76B8E0ADA0F13D90405D6AE55386BD28BDD219B8A08DED1AA836EFCC8B770DC7DA41597C5157488D7724E03FB8D84A376A43B8F41518A11CC387B669B2EE6586",
            "4540F05A9F1FB296D7736E7B208E3C96EB4FE1834688D2604F450952ED432D41BBE2A0B6EA7566D2A5D1E7E20D42AF2C53D792B1C43FEA817E9AD275AE546963",
            "DE9CBA7BF3D69EF5E786DC63973F653A0B49E015ADBFF7134FCB7DF137821031E85A050278A7084527214F73EFC7FA5B5277062EB7A0433E445F41E3",
            "EF3FDFD6C61578FBF5CF35BD3DD33B8009631634D21E42AC33960BD138E50D32111E4CAF237EE53CA8AD6426194A88545DDC497A0B466E7D6BBDB0041B2F586B",
            "F798A189F195E66982105FFB640BB7757F579DA31602FC93EC01AC56F85AC3C134A4547B733B46413042C9440049176905D3BE59EA1C53F15916155C2BE8241A38008B9A26BC35941E2444177C8ADE6689DE95264986D95889FB60E84629C9BD9A5ACB1CC118BE563EB9B3A4A472F82E09A7E778492B562EF7130E88DFE031C79DB9D4F7C7A899151B9A475032B63FC385245FE054E3DD5A97A5F576FE064025D3CE042C566AB2C507B138DB853E3D6959660996546CC9C4A6EAFDC777C040D70EAF46F76DAD3979E5C5360C3317166A1C894C94A371876A94DF7628FE4EAAF2CCB27D5AAAE0AD7AD0F9D4B6AD3B54098746D4524D38407A6DEB3AB78FAB78C9"
        ]

        for (var idx = 0; idx < keys.count; idx++) {
            let keyData = NSData(bytes: keys[idx], length: keys[idx].count)
            let ivData = NSData(bytes: ivs[idx], length: ivs[idx].count)
            
            let expectedHex = expectedHexes[idx]
            //println(countElements(expectedHex) / 2);
            let message = [Byte](count: (countElements(expectedHex) / 2), repeatedValue: 0)
            let messageData = NSData(bytes: message, length: message.count);
            
            let setup = (key: keyData, iv: ivData)
            var encrypted = Cipher.ChaCha20(setup).encrypt(messageData)
            XCTAssertNotNil(encrypted, "")
            if let encrypted = encrypted {
                var decrypted = Cipher.ChaCha20(setup).decrypt(encrypted)
                XCTAssertNotNil(decrypted, "")
                if let decrypted = decrypted {
                    XCTAssertEqual(messageData, decrypted, "ChaCha20 decryption failed");
                }

                // check extension
                let encrypted2 = messageData.encrypt(Cipher.ChaCha20(setup))
                XCTAssertNotNil(encrypted2, "")
                if let encrypted2 = encrypted2 {
                    XCTAssertEqual(encrypted, encrypted2, "ChaCha20 extension failed")
                }
            }
        }
    }
}
